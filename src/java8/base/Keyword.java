package java8.base;

/**
 * @author: young
 * @create: 2019/3/28 16:16
 * @desc: 关键字
 */
public class Keyword {
    
    public static void main(String[] args) {
        /**
         * final
         * 1. 数据
         * 声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。
         *
         * 对于基本类型，final 使数值不变；
         * 对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。
         */

        /**
         * 2. 方法
         * 声明方法不能被子类重写.
         * private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。
         *
         * 3. 类
         * 声明类不允许被继承.
         */

        /**
         * static
         * 1. 静态变量
         * 又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。\
         *
         * 2. 静态方法
         * 静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。
         * 只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。
         *
         * 3. 静态语句块
         * 静态语句块在类初始化时运行一次。
         *
         * 4. 静态内部类
         * 非静态内部类依赖于外部类的实例，而静态内部类不需要。
         *
         * 5. 静态导包
         * import static com.xxx.ClassName.*
         * 在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。
         */

        /**
         * 存在继承的情况下，初始化顺序为：
         *
         * 父类（静态变量、静态语句块）
         * 子类（静态变量、静态语句块）
         * 父类（实例变量、普通语句块）
         * 父类（构造函数）
         * 子类（实例变量、普通语句块）
         * 子类（构造函数）
         */

    }
}
